% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/train_CNN_multi.R
\name{train_CNN_multi}
\alias{train_CNN_multi}
\title{Train Multi-class pretrained CNN Models}
\usage{
train_CNN_multi(
  input.data.path,
  test.data,
  architecture,
  unfreeze.param = TRUE,
  batch_size = 32,
  learning_rate,
  save.model = FALSE,
  class_weights = c(0.49, 0.49, 0.02),
  epoch.iterations = 1,
  early.stop = "yes",
  output.base.path = tempdir(),
  brightness = 0,
  contrast = 0,
  saturation = 0,
  trainingfolder,
  noise.category = "Noise"
)
}
\arguments{
\item{input.data.path}{Character. Path to the input data folder.}

\item{test.data}{Character. Path to the test data folder.}

\item{architecture}{Character. Specifies the CNN architecture to use ('alexnet', 'vgg16', 'vgg19', 'resnet18', 'resnet50', or 'resnet152').}

\item{unfreeze.param}{Logical. Indicates whether all layers of the pretrained CNN should be unfrozen for retraining. Default is TRUE.}

\item{batch_size}{Numeric. Batch size for training the model. Default is 32.}

\item{learning_rate}{Numeric. Learning rate for training the model.}

\item{save.model}{Logical. Specifies whether to save the trained model for future use. Default is FALSE.}

\item{class_weights}{Numeric vector. Weights assigned to different classes for handling class imbalance. Default is c(0.49, 0.49, 0.02).}

\item{epoch.iterations}{List of integers. Number of epochs for training the model. Default is 1.}

\item{early.stop}{Character. Indicates whether early stopping should be applied or not. Use "yes" to apply and "no" to skip. Default is 'yes'.}

\item{output.base.path}{Character. Base path where the output files should be saved. Default is 'data/'.}

\item{trainingfolder}{Character. A descriptive name for the training data, used for naming output files.}

\item{noise.category}{Character. Label for the noise category. Default is "Noise".}
}
\value{
The function generates multiple output files, including:
\itemize{
\item \strong{Trained Models}: If save.model = TRUE outputs saved model files (.pt) for specified architectures.
\item \strong{Training Logs}: logs_model.csv containing logs of training sessions, including loss and accuracy metrics.
\item \strong{Metadata}: model_metadata.csv contains metadata from training run
\item \strong{Model predictions}: Saved for each architecture in output_TrainedModel_testdata.csv
\item \strong{Performance Evaluation}: Saves .csv summarizing performance for each architecture in nested folder in output.base.path 'performance_tables_multi'.
}
}
\description{
This function facilitates training of convolutional neural network (CNN) models using various transfer learning architectures such as AlexNet, VGG16, VGG19, ResNet18, ResNet50, or ResNet152, on a given dataset. The trained model is saved along with metadata for further usage.
}
\note{
Requires train, valid, and test folders
created using created using 'spectrogram_images'
}
\examples{
{{ input.data.path <- system.file("extdata", "multiclass/", package = "gibbonNetR")
  test.data <- system.file("extdata", "multiclass/test/", package = "gibbonNetR")
  result <- train_CNN_multi(
    input.data.path = input.data.path,
    test.data = test.data,
    architecture = "alexnet", # Choose architecture
    unfreeze.param = TRUE,
    class_weights = rep((1 / 5), 5),
    batch_size = 6,
    learning_rate = 0.001,
    epoch.iterations = 1, # Or any other list of integer epochs
    early.stop = "yes",
    output.base.path = paste(tempdir(), "/", sep = ""),
    trainingfolder = "test",
    noise.category = "noise"
  )
  print(result) }}
}
\seealso{
\code{\link[torch]{nn_module}} and other torch functions.
}
