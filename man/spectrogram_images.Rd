% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spectrogram_images.R
\name{spectrogram_images}
\alias{spectrogram_images}
\title{Process and Save Spectrogram Images from Sound Files}
\usage{
spectrogram_images(
  trainingBasePath,
  outputBasePath,
  splits,
  minfreq.khz = 0.4,
  maxfreq.khz = 1.6,
  new.sampleratehz = 16000
)
}
\arguments{
\item{trainingBasePath}{Base directory containing the training folders.}

\item{outputBasePath}{Directory where the processed images will be saved.}

\item{splits}{Numeric vector specifying the split ratios for train, valid, and test sets. Defaults to c(0.8, 0.1, 0.1).}

\item{minfreq.khz}{Minimum frequency in kHz for the spectrogram. Defaults to 0.4.}

\item{maxfreq.khz}{Maximum frequency in kHz for the spectrogram. Defaults to 2.}

\item{new.sampleratehz}{New sample rate in Hz for resampling the audio. Defaults to 16000. Set to 'NA' if no resampling is required.}
}
\value{
Invisible NULL
}
\description{
Process and Save Spectrogram Images from Sound Files
}
\examples{
{
library(gibbonNetR)

# Load data
data("TempBinWav")

# Define the output directory
output.dir <- paste(tempdir(), '/MultiDir/Noise/')

# Create the output directory
dir.create(output.dir, recursive = TRUE, showWarnings = FALSE)

# Define the intervals for cutting the wave
cutwave.list <- seq(1, 30, 5)

# Extract subsamples from the waveform
subsamps <- lapply(1:(length(cutwave.list) - 1),
                   function(i)
                     extractWave(
                       TempBinWav,
                       from = cutwave.list[i],
                       to = cutwave.list[i + 1],
                       xunit = c("time"),
                       plot = FALSE,
                       output = "Wave"
                     ))

# Write the extracted subsamples to .wav files
lapply(1:length(subsamps),
       function(i)
         writeWave(
           subsamps[[i]],
           filename = paste(
             output.dir,
             'temp_', i, '_', '.wav',
             sep = ''
           ),
           extensible = FALSE
         )
)

# List the files in the output directory
list.files(output.dir)

# Generate spectrogram images
spectrogram_images(
  trainingBasePath = paste(tempdir(), '/MultiDir/'),
  outputBasePath = paste(tempdir(), '/MultiDir/', 'Spectro/', sep = ''),
  splits = c(1, 0, 0),
  new.sampleratehz = 'NA'
)

# List the images generated
ListImages <- list.files(paste(tempdir(), '/MultiDir/', 'Spectro/', sep = ''), recursive = TRUE)

print(ListImages)

# Get the path of a single image
Singlepath <- list.files(paste(tempdir(), '/MultiDir/', 'Spectro/', sep = ''), recursive = TRUE, full.names = TRUE)[1]

# Read the image
img <- jpeg::readJPEG(Singlepath)

# Plot the image with no axis labels
plot(1:1, type = 'n', xlab = "Time", ylab = "Frequency", xaxt = 'n', yaxt = 'n')
rasterImage(img, par("usr")[1], par("usr")[3], par("usr")[2], par("usr")[4])
}
}
