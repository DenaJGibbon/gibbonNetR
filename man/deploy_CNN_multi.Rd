% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deploy_CNN_multi.R
\name{deploy_CNN_multi}
\alias{deploy_CNN_multi}
\title{Transfer Learning from Sound Directories}
\usage{
deploy_CNN_multi(
  output_folder,
  output_folder_selections,
  output_folder_wav,
  top_model_path,
  path_to_files,
  detect_pattern = NA,
  architecture,
  clip_duration = 12,
  hop_size = 6,
  downsample_rate = 16000,
  threshold = 0.1,
  save_wav = TRUE,
  class_names = c("duet", "hornbill.helmeted", "hornbill.rhino", "long.argus", "noise"),
  noise_category = "noise",
  max_freq_khz = 2,
  single_class = TRUE,
  single_class_category = "duet",
  for_prrec = TRUE
)
}
\arguments{
\item{output_folder}{A character string specifying the path to the output folder where the results will be saved.}

\item{output_folder_selections}{A character string specifying the path to the folder where selection tables will be saved.}

\item{output_folder_wav}{A character string specifying the path to the folder where extracted WAV files will be saved.}

\item{top_model_path}{A character string specifying the path to the pre-trained top model for classification.}

\item{path_to_files}{A character string specifying the path to the directory or list containing sound files to process.}

\item{clip_duration}{The duration of each sound clip in seconds.}

\item{hop_size}{The hop size for splitting the sound clips.}

\item{downsample_rate}{The downsample rate for audio in Hz, set to 'NA' if no downsampling is required.}

\item{threshold}{The threshold for audio detection.}

\item{save_wav}{A logical value indicating whether to save the extracted sound clips as WAV files.}

\item{class_names}{A character vector containing the unique classes for training the model.}

\item{noise_category}{A character string specifying the noise category for exclusion.}

\item{max_freq_khz}{The maximum frequency in kHz for spectrogram visualization.}

\item{single_class}{A logical value indicating whether to process only a single class.}

\item{single_class_category}{A character string specifying the single class category when 'single_class' is set to TRUE.}
}
\description{
This function processes sound data from a specified directory, performs transfer learning using a pre-trained deep learning model, and saves the results.
}
\details{
This function processes sound data from a directory, extracts sound clips, converts them to images, performs image classification using a pre-trained deep learning model, and saves the results including selection tables and image and audio files.
}
\examples{
{
# Load data
data("TempBinWav")

dir.create(paste(tempdir(),'/MultiDir/Wav/'),recursive = T, showWarnings = FALSE)

# Write to temp directory
writeWave(TempBinWav,filename = paste(tempdir(),'/MultiDir/Wav/','TempBinWav.wav'))

# Train the model
train_CNN_multi(
  input.data.path = "inst/extdata/multiclass/",
  test.data = "inst/extdata/multiclass/test/",
  architecture = "resnet18",  #' Choose 'alexnet', 'vgg16', 'vgg19', 'resnet18', 'resnet50', or 'resnet152'
  unfreeze.param = TRUE,
  batch_size = 6,
  class_weights = rep( (1/5), 5),
  learning_rate = 0.001,
  epoch.iterations = 3,  #' Or any other list of integer epochs
  early.stop = "yes",
  save.model= TRUE,
  output.base.path = paste(tempdir(),'/MultiDir/',sep=''),
  trainingfolder = "test_multi",
  noise.category = 'noise'
)

# Find model path
TempFileList <- list.files(paste(tempdir(),'/MultiDir/',sep=''),full.names = T,recursive = T)

# Specify model path
ModelPath <- TempFileList[which(str_detect(TempFileList,'model.pt'))]

# Deploy trained model over sound files
deploy_CNN_multi(
  clip_duration = 12,
  architecture='resnet18',
  output_folder = paste(tempdir(),'/MultiDir/Results/Images/',sep=''),
  output_folder_selections = paste(tempdir(),'/MultiDir/Results/Selections/',sep=''),
  output_folder_wav = paste(tempdir(),'/MultiDir/Results/Wavs/',sep=''),
  detect_pattern=NA,
  top_model_path = ModelPath,
  path_to_files = paste(tempdir(),'/MultiDir/Wav/'),
  downsample_rate = 'NA',
  save_wav = F,
  class_names = c('duet','hornbill.helmeted','hornbill.rhino','long.argus','noise'),
  noise_category = 'noise',
  single_class = FALSE,
  threshold = .25,
  max_freq_khz = 2
)
}

}
