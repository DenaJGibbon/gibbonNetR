% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deploy_CNN_multi.R
\name{deploy_CNN_multi}
\alias{deploy_CNN_multi}
\title{Transfer Learning from Sound Directories}
\usage{
deploy_CNN_multi(
  output_folder,
  output_folder_selections,
  output_folder_wav,
  top_model_path,
  path_to_files,
  detect_pattern = NA,
  architecture,
  clip_duration = 12,
  hop_size = 6,
  downsample_rate = 16000,
  threshold = 0.1,
  save_wav = TRUE,
  class_names = c("female.gibbon", "hornbill.helmeted", "hornbill.rhino", "long.argus",
    "noise"),
  noise_category = "noise",
  max_freq_khz = 2,
  single_class = TRUE,
  single_class_category = "female.gibbon",
  for_prrec = TRUE
)
}
\arguments{
\item{output_folder}{A character string specifying the path to the output folder where the results will be saved.}

\item{output_folder_selections}{A character string specifying the path to the folder where selection tables will be saved.}

\item{output_folder_wav}{A character string specifying the path to the folder where extracted WAV files will be saved.}

\item{top_model_path}{A character string specifying the path to the pre-trained top model for classification.}

\item{path_to_files}{A character string specifying the path to the directory or list containing sound files to process.}

\item{detect_pattern}{Pattern in sound file to detect for subset.}

\item{architecture}{User specified: 'alexnet', 'vgg16', 'vgg19', 'resnet18', 'resnet50', or 'resnet152'}

\item{clip_duration}{The duration of each sound clip in seconds.}

\item{hop_size}{The hop size for splitting the sound clips.}

\item{downsample_rate}{The downsample rate for audio in Hz, set to 'NA' if no downsampling is required.}

\item{threshold}{The threshold for audio detection.}

\item{save_wav}{A logical value indicating whether to save the extracted sound clips as WAV files.}

\item{class_names}{A character vector containing the unique classes for training the model.}

\item{noise_category}{A character string specifying the noise category for exclusion.}

\item{max_freq_khz}{The maximum frequency in kHz for spectrogram visualization.}

\item{single_class}{A logical value indicating whether to process only a single class. For now 'TRUE' is only option.}

\item{single_class_category}{A character string specifying the single class category when 'single_class' is set to TRUE.}

\item{for_prrec}{Whether to output all detections to create a PR curve.}
}
\value{
Returns spectrogram images, wav files (if specified), and Raven selection tables for each sound file.
}
\description{
This function processes sound data from a specified directory, performs transfer learning using a pre-trained deep learning model, and saves the results.
}
\details{
This function processes sound data from a directory, extracts sound clips, converts them to images, performs image classification using a pre-trained deep learning model, and saves the results including selection tables and image and audio files.
}
\note{
This function takes a model trained using the 'train_CNN_multi' function.
}
\examples{
{
  # Load data
  data("TempBinWav")

  # Create necessary directories
  dir.create(file.path(tempdir(), "MultiDir", "Wav"), recursive = TRUE, showWarnings = FALSE)

  # Write to temp directory
  writeWave(TempBinWav, filename = file.path(tempdir(), "MultiDir", "Wav", "TempBinWav.wav"))

  # Set model directory
  trained_models_dir <- system.file("extdata", "trainedresnetmulti", package = "gibbonNetR")

  # Specify model path
  ModelPath <- list.files(trained_models_dir, full.names = TRUE)

  # Deploy trained model over sound files
  deploy_CNN_multi(
    clip_duration = 12,
    architecture = "resnet18",
    output_folder = file.path(tempdir(), "MultiDir", "Results", "Images"),
    output_folder_selections = file.path(tempdir(), "MultiDir", "Results", "Selections"),
    output_folder_wav = file.path(tempdir(), "MultiDir", "Results", "Wavs"),
    detect_pattern = NA,
    top_model_path = ModelPath,
    path_to_files = file.path(tempdir(), "MultiDir", "Wav"),
    downsample_rate = "NA",
    save_wav = FALSE,
    class_names = c("female.gibbon", "hornbill.helmeted", "hornbill.rhino", "long.argus", "noise"),
    noise_category = "noise",
    single_class = FALSE,
    threshold = 0.25,
    max_freq_khz = 2
  )
}
}
